http://localhost:4200/
ctrl+C; will close the terminal

Important files: angular.json,packages.json,tsconfig.json
Root component : AppComponent,AppModule,main.ts,index.html.
Karma :Unit test
Protractor : EndtoEnd  spec.ts is for unit testing.


A class having following decorators:
@Component  > component
@NgModule   > module
@Injectable > Service ,Gaurd
@Directive  > Directive implements Validator validate(control: AbstractControl)
@Pipe       > pipe implements PipeTransform transform(value: any, index: number) seperated by propname : type


declarations   >  components, and a component must be declared only in one module. If need use in the common module and import the module.
Providers >  services,gaurds, services which has the DI must be present in the providers of the component/module. 
imports > modules.
exports > custom pipes, custom directives to be present in the exports[] of a module.
 
----------------------------------------------------------------------------------------------------------------------------------------
>Component : class, selector, template

import { Component,Input,Output,EventEmitter } from "@angular/core";

// this is a selector
@Component({
  selector: 'app-first',
  templateUrl: './first.component.html',// template
  styleUrls: ['./first.component.css'],
  providers :[] // Services
})

// this is a class
export class FirstComponent{
    name :string ='test';

    @Input() // this is used to pass the data from parent to the child component
    parentToChild : number;
}
----------------------------------------------------------------------------------------------------------------------------------------
>Module:

// All the components,directvies,pipes : declarations[]
// All the modules in imports[]
// All the services in providers[]
// The components,directives,pipes which we create in a module is specific to that module only. if we want to reuse in the other modules then we need to  declare in export[] 
// Creating shared modules allows you to organize and streamline your code.
   You can put commonly used directives, pipes, and components into one module and then import just that module wherever you need it in other parts of your app.
// For s service/Gaurd : If we want to create a instance to all the module introduce in app.module else inject in specific module.
// what ever we import would be specific to one module.
// diperb

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser'; //needs to run angular in all browsers

@NgModule({
  declarations: [
    AppComponent,
    FirstComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    HttpClientModule // this is for http sevice calls.
  ],
  providers: [],
  exports :[],
  bootstrap: [AppComponent]
})
export class AppModule { }

----------------------------------------------------------------------------------------------------------------------------------------
>Services:
// This will inject the service in the root no need to add in the providers again.
// if we dont have providedIn: 'root' we need to register in the providers[] of the module.
@Injectable({
    providedIn: 'root'
 });
 
// If we return a observable we need to subscribe it.

import {Injectable} from '@angular/core'

@Injectable()
export class CarService
{

}

----------------------------------------------------------------------------------------------------------------------------------------
>Routing :
import { Router, ActivatedRoute,Routes, RouterModule } from '@angular/router';
const routes: Routes =[{
    path: 'create/:id {fname : ''}', component: CreateEmloyeeComponent,pathMatch: 'full', canDeactivate/canActivate :[CanDeactiveCreateEmployeeGuard],data:''
  }]
@NgModule({
  imports: [RouterModule.forRoot(routes)], // (routes,{ useHash: true})
  exports: [RouterModule]
})

constructor(private activate: ActivatedRoute, private navigateroute: Router) { }
ngOnInit(): void {

//to get from the route param we use 'paramMap' and to get the details from the query we use 'queryParamMap' > subscribe
this.activate.snapshot.paramMap.get('id')

//reading from the url querey.
this.activate.queryParams.subscribe(params => {
      this.fullEmployeeDetails.name = params.name;})
}

----------------------------------------------------------------------------------------------------------------------------------------
>http service:
From angular 5 onwards:
In Module>  
import {HttpClientModule} from '@angular/common/http';
Add to the imports in the app.module.ts. not required to add to the providers as HttpClientModule will implicitly do it.

In Service>
import { HttpClient } from '@angular/common/http';
constructor(private _http : HttpClient) { }
>> Any service must be registered in the providers of the module.


<httpProtocol> which needs to be added in the webapi service side.
<system.webServer>
    <httpProtocol>
      <customHeaders>
        <add name="Access-Control-Allow-Origin" value="*"/>
        <add name="Access-Control-Allow-Headers" value="Content-Type"/>
        <add name="Access-Control-Allow-Methods" value="GET,PUT,POST,DELETE"/>
      </customHeaders>
    </httpProtocol>
  </system.webServer> 
----------------------------------------------------------------------------------------------------------------------------------------
>Pipes:
purepipe, impure pipe
@Pipe({
    name: 'vowelpipe',
    pure:true
})
export class VowelPipe implements PipeTransform {
    transform(value: any, index: number) {
        return `${value} has vowels ${this.getVowelCount(value)} and the array index is ${index}` ;
    }
}

pure pipe has pure: true and impure pipe has pure : false. 
Pure pipe is executed when a primitive input value (string,number,boolean) or object reference (array,date,object) is changed.
pure pipe is fast and is not not executed when the property of a reference object is changed.
impure is executed for every change like mouseover and is slow.
----------------------------------------------------------------------------------------------------------------------------------------
>RxJs:
import { Observable, of, throwError } from 'rxjs';
import { retry, retryWhen, scan, delay, catchError } from 'rxjs/operators';

Typecasting observable
throwError()
.pipe(catchError())
retry
Delay()
scan()
toPromise()
Observable.of('array')
map,foreach,filter,reduce,retry,retryWhen.
----------------------------------------------------------------------------------------------------------------------------------------
>bootstrap/jquery:
"styles": [
              "src/styles.css",
              "node_modules/bootstrap/dist/css/bootstrap.min.css",
              "node_modules/ngx-bootstrap/datepicker/bs-datepicker.css"
            ],
            "scripts": [
              "node_modules/jquery/dist/jquery.min.js",
              "node_modules/bootstrap/dist/js/bootstrap.min.js"
            ]
----------------------------------------------------------------------------------------------------------------------------------------